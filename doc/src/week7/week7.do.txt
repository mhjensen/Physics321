TITLE: PHY321: Conservative Forces, Examples and Theory and start Harmonic Oscillations
AUTHOR: "Morten Hjorth-Jensen":"http://mhjgit.github.io/info/doc/web/" {copyright, 1999-present|CC BY-NC} at Department of Physics and Astronomy and Facility for Rare Ion Beams (FRIB), Michigan State University, USA & Department of Physics, University of Oslo, Norway
DATE: today


!split
=====   Aims and Overarching Motivation =====

=== Monday ===

Discussion of conditions for conservative forces and summing up our
discussion on conservative forces. Discussion of potential surfaces
and their interpretations.  Start discussion of hamronic oscillations.

and the Earth-Sun gravitional
force example.  _Reading suggestion_: Taylor sections 4.3, 4.4 and 4.8.

=== Wednesday ===

The Earth sun problem and energy-conserving algorithms and how to encode in more efficient ways

_Reading suggestions_: Taylor section 4.6, 4.8 and 4.9.

===  Friday ===
Working on the Earth-Sun,  conservative forces and potential energy and solution of hw 5.


!split
===== Additional Material: Link between Line Integrals and Conservative forces =====


The concept of line integrals plays an important role in our discussion of energy conservation,
our definition of potentials and conservative forces.

Let us remind ourselves of some the basic elements (most of you may
have seen this in a calculus course under the general topic of vector
fields).

We define a path integration $C$, that is we integrate
from a point $\bm{r}_1$ to a point $\bm{r}_2$. 
Let us assume that the path $C$ is represented by an arc length $s$. In three dimension we have the following representation of $C$
!bt
\[
\bm{r}(s)=x(s)\bm{e}_1+y(s)\bm{e}_2+z(s)\bm{e}_3,
\]
!et
then our integral of a function $f(x,y,z)$ along the path $C$ is defined as 
!bt
\[
\int_Cf(x,y,z)ds=\int_a^bf\left(x(s),y(s),z(s)\right)ds,
\]
!et
where the initial and final points are $a$ and $b$, respectively.
!split
===== Exactness and Independence of Path =====

With the definition of a line integral, we can in tunrn set up the
theorem of independence of integration path.

Let us define
$f(x,y,z)$, $g(x,y,z)$ and $h(x,y,z)$ to be functions which are
defined and continuous in a domain $D$ in space. Then a line integral
like the above is said to be independent of path in $D$, if for every
pair of endpoints $a$ and $b$ in $D$ the value of the integral is the
same for all paths $C$ in $D$ starting from a point $a$ and ending in
a point $b$. The integral depends thus only on the integration limits
and not on the path.

!split
===== Differential Forms =====

An expression of the form
!bt
\[
fdx+gdy+hdz,
\]
!et
where $f$, $g$ and $h$ are functions defined in $D$, is a called a first-order differential form
in three variables.
The form is said to be exact if it is the differential
!bt
\[
du= \frac{\partial u}{\partial x}dx+\frac{\partial u}{\partial y}dy+\frac{\partial u}{\partial z}dz,
\]
!et
of a differentiable function $u(x,y,z)$ everywhere in $D$, that is
!bt
\[
du=fdx+gdy+hdz.
\]
!et
It is said to be exact if and only if we can then set
!bt
\[
f=\frac{\partial u}{\partial x},
\]
!et
and
!bt
\[
g=\frac{\partial u}{\partial y},
\]
!et
and
!bt
\[
h=\frac{\partial u}{\partial z},
\]
!et
everywhere in the domain $D$.

!split
=====  In Vector Language =====

In vector language the above means that the differential form 
!bt
\[
fdx+gdy+hdz,
\]
!et
is exact in $D$ if and only if the vector function (it could be a force, or velocity, acceleration or other vectors we encounter in this course)
!bt
\[
\bm{F}=f\bm{e}_1+g\bm{e}_2+h\bm{e}_3,
\]
!et
is the gradient of a function $u(x,y,z)$
!bt
\[
\bm{v}=\bm{\nabla}u=\frac{\partial u}{\partial x}\bm{e}_1+\frac{\partial u}{\partial y}\bm{e}_2+\frac{\partial u}{\partial z}\bm{e}_3.
\]
!et

!split
===== Path Independence Theorem =====

If this is the case, we can state the path independence theorem which
states that with functions $f(x,y,z)$, $g(x,y,z)$ and $h(x,y,z)$ that fulfill the above
exactness conditions,  the line integral

!bt
\[
\int_C\left(fdx+gdy+hdz\right),
\]
!et
is independent of path in $D$ if and only if the differential form under the integral sign is exact in $D$.

This is the path independence theorem. 

We will not give a proof of the theorem. You can find this in any vector analysis chapter in a mathematics textbook.

We note however that the path integral from a point $p$ to a final point $q$ is given by
!bt
\[
\int_p^q\left(fdx+gdy+hdz\right)=\int_p^q\left(\frac{\partial u}{\partial x}dx+\frac{\partial u}{\partial y}dy+\frac{\partial u}{\partial z}dz\right)=\int_p^qdu.
\]
!et

Assume now that we have a dependence on a variable $s$ for $x$, $y$ and $z$. We have then
!bt
\[
\int_p^qdu=\int_{s_1}^{s_2}\frac{du}{ds}ds = u(x(s),y(s),z(s))\vert_{s=s_1}^{s=s_2}=u(q)-u(p).
\]
!et



This last equation
!bt
\[
\int_p^q\left(fdx+gdy+hdz\right)=u(q)-u(p),
\]
!et
is the analogue of the usual formula
!bt
\[
\int_a^bf(x)dx=F(x)\vert_a^b=F(b)-F(a),
\]
!et
with $F'(x)=f(x)$.

!split
===== Work-Energy Theorem again =====

We remember that a the work done by a force
$\bm{F}=f\bm{e}_1+g\bm{e}_2+h\bm{e}_3$ on a displacemnt $d\bm{r}$
is
!bt
\[
W=\int_C\bm{F}d\bm{r}=\int_C(fdx+gdy+hdz).
\]
!et

From the path independence theorem, we know that this has to result in
the difference between the two endpoints only. This is exact if and
only if the force is the force $\bm{F}$ is the gradient of a scalar
function $u$. We call this scalar function, which depends only the
positions $x,y,z$ for the potential energy $V(x,y,z)=V(\bm{r})$.

We have thus
!bt
\[
\bm{F}(\bm{r})\propto \bm{\nabla}V(\bm{r}),
\]
!et
and we define  this as
!bt
\[
\bm{F}(\bm{r})= -\bm{\nabla}V(\bm{r}).
\]
!et

Such a force is called _a conservative force_. The above expression can be used to demonstrate
energy conservation.

!split
===== Additional Theorem =====

Finally we can define the criterion for exactness and independence of
path. This theorem states that if $f(x,y,z)$, $g(x,y,z)$ and
$h(x,y,z)$ are continuous functions with continuous first partial derivatives in the domain $D$,
then the line integral
!bt
\[
\int_C\left(fdx+gdy+hdz\right),
\]
!et
is independent of path in $D$ when

!bt
\[
\frac{\partial h}{\partial y}=\frac{\partial g}{\partial z},
\]
!et
and
!bt
\[
\frac{\partial f}{\partial z}=\frac{\partial h}{\partial x},
\]
!et
and
!bt
\[
\frac{\partial g}{\partial x}=\frac{\partial f}{\partial y}.
\]
!et

This leads to the _curl_ of $\bm{F}$ being zero
!bt
\[
\bm{\nabla}\times\bm{F}=\bm{\nabla}\times\left(-\bm{\nabla}V(\bm{r})\right)=0!
\]
!et

!split
===== Summarizing =====

A conservative force $\bm{F}$ is a defined as the partial derivative of a scalar potential which depends only on the position,
!bt
\[
\bm{F}(\bm{r})= -\bm{\nabla}V(\bm{r}).
\]
!et

This leads to conservation of energy and a path independent line integral as long as the curl of the force is zero, that is
!bt
\[
\bm{\nabla}\times\bm{F}=\bm{\nabla}\times\left(-\bm{\nabla}V(\bm{r})\right)=0.
\]
!et


!split
===== The Earth-Sun system =====

We will now venture into a study of a system which is energy
conserving. The aim is to see if we (since it is not possible to solve
the general equations analytically) we can develop stable numerical
algorithms whose results we can trust!

We solve the equations of motion numerically. We will also compute
quantities like the energy numerically.

We start with a simpler case first, the Earth-Sun system  in two dimensions only.  The gravitational force $F_G$ on the earth from the sun is  
!bt
\[
\bm{F}_G=-\frac{GM_{\odot}M_E}{r^3}\bm{r},
\]
!et
where $G$ is the gravitational constant, 
!bt
\[
M_E=6\times 10^{24}\mathrm{Kg},
\]
!et 
the mass of Earth, 
!bt
\[
M_{\odot}=2\times 10^{30}\mathrm{Kg}, 
\]
!et
the mass of the Sun and 
!bt
\[
r=1.5\times 10^{11}\mathrm{m}, 
\]
!et
is the distance between Earth and the Sun. The latter defines what we call an astronomical unit _AU_.


!split
===== The Earth-Sun system, Newton's Laws =====

From Newton's second law we have then for the $x$ direction
!bt
\[
\frac{d^2x}{dt^2}=-\frac{F_{x}}{M_E},
\]
!et
and
!bt
\[
\frac{d^2y}{dt^2}=-\frac{F_{y}}{M_E},
\]
!et 
for the $y$ direction.

Here we will use  that  $x=r\cos{(\theta)}$, $y=r\sin{(\theta)}$ and
!bt
\[
r = \sqrt{x^2+y^2}.
\]
!et 
We can rewrite 
!bt
\[
F_{x}=-\frac{GM_{\odot}M_E}{r^2}\cos{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}x,
\]
!et
and
!bt
\[
F_{y}=-\frac{GM_{\odot}M_E}{r^2}\sin{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}y,
\]
!et 
for the $y$ direction.

!split
===== The Earth-Sun system, rewriting the Equations =====

We can rewrite these two equations
!bt
\[
F_{x}=-\frac{GM_{\odot}M_E}{r^2}\cos{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}x,
\]
!et
and
!bt
\[
F_{y}=-\frac{GM_{\odot}M_E}{r^2}\sin{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}y,
\]
!et 
as four first-order coupled differential equations
!bt
\[
\frac{dv_x}{dt}=-\frac{GM_{\odot}}{r^3}x,
\]
!et
!bt
\[
\frac{dx}{dt}=v_x,
\]
!et
!bt
\[
\frac{dv_y}{dt}=-\frac{GM_{\odot}}{r^3}y,
\]
!et
!bt
\[
\frac{dy}{dt}=v_y.
\]
!et



!split
===== Building a code for the solar system, final coupled equations =====

The four coupled differential equations
!bt
\[
\frac{dv_x}{dt}=-\frac{GM_{\odot}}{r^3}x,
\]
!et
!bt
\[
\frac{dx}{dt}=v_x,
\]
!et
!bt
\[
\frac{dv_y}{dt}=-\frac{GM_{\odot}}{r^3}y,
\]
!et
!bt
\[
\frac{dy}{dt}=v_y,
\]
!et
can be turned into dimensionless equations or we can introduce astronomical units with $1$ AU = $1.5\times 10^{11}$. 

Using the equations from circular motion (with $r =1\mathrm{AU}$) 
!bt
\[
\frac{M_E v^2}{r} = F = \frac{GM_{\odot}M_E}{r^2},
\]
!et 
we have
!bt
\[
GM_{\odot}=v^2r,
\]
!et  
and using that the velocity of Earth (assuming circular motion) is
$v = 2\pi r/\mathrm{yr}=2\pi\mathrm{AU}/\mathrm{yr}$, we have
!bt
\[
GM_{\odot}= v^2r = 4\pi^2 \frac{(\mathrm{AU})^3}{\mathrm{yr}^2}.
\]
!et 



!split
===== Building a code for the solar system, discretized equations =====

The four coupled differential equations can then be discretized using Euler's method as (with step length $h$)
!bt
\[
v_{x,i+1}=v_{x,i}-h\frac{4\pi^2}{r_i^3}x_i,
\]
!et
!bt
\[
x_{i+1}=x_i+hv_{x,i},
\]
!et
!bt
\[
v_{y,i+1}=v_{y,i}-h\frac{4\pi^2}{r_i^3}y_i,
\]
!et
!bt
\[
y_{i+1}=y_i+hv_{y,i},
\]
!et


!split
===== Code Example with Euler's Method =====

The code here implements Euler's method for the Earth-Sun system using a more compact way of representing the vectors. Alternatively, you could have spelled out all the variables $v_x$, $v_y$, $x$ and $y$ as one-dimensional arrays. 

!bc pycod
# Common imports
import numpy as np
import pandas as pd
from math import *
import matplotlib.pyplot as plt
import os

# Where to save the figures and data files
PROJECT_ROOT_DIR = "Results"
FIGURE_ID = "Results/FigureFiles"
DATA_ID = "DataFiles/"

if not os.path.exists(PROJECT_ROOT_DIR):
    os.mkdir(PROJECT_ROOT_DIR)

if not os.path.exists(FIGURE_ID):
    os.makedirs(FIGURE_ID)

if not os.path.exists(DATA_ID):
    os.makedirs(DATA_ID)

def image_path(fig_id):
    return os.path.join(FIGURE_ID, fig_id)

def data_path(dat_id):
    return os.path.join(DATA_ID, dat_id)

def save_fig(fig_id):
    plt.savefig(image_path(fig_id) + ".png", format='png')


DeltaT = 0.001
#set up arrays 
tfinal = 10 # in years
n = ceil(tfinal/DeltaT)
# set up arrays for t, a, v, and x
t = np.zeros(n)
v = np.zeros((n,2))
r = np.zeros((n,2))
# Initial conditions as compact 2-dimensional arrays
r0 = np.array([1.0,0.0])
v0 = np.array([0.0,2*pi])
r[0] = r0
v[0] = v0
Fourpi2 = 4*pi*pi
# Start integrating using Euler's method
for i in range(n-1):
    # Set up the acceleration
    # Here you could have defined your own function for this
    rabs = sqrt(sum(r[i]*r[i]))
    a =  -Fourpi2*r[i]/(rabs**3)
    # update velocity, time and position using Euler's forward method
    v[i+1] = v[i] + DeltaT*a
    r[i+1] = r[i] + DeltaT*v[i]
    t[i+1] = t[i] + DeltaT
# Plot position as function of time    
fig, ax = plt.subplots()
#ax.set_xlim(0, tfinal)
ax.set_ylabel('y[AU]')
ax.set_xlabel('x[AU]')
ax.plot(r[:,0], r[:,1])
fig.tight_layout()
save_fig("EarthSunEuler")
plt.show()
!ec


!split
===== Problems with Euler's Method =====

We notice here that Euler's method doesn't give a stable orbit. It
means that we cannot trust Euler's method. In a deeper way, as we will
see in homework 5, Euler's method does not conserve energy. It is an
example of an integrator which is not
"symplectic":"https://en.wikipedia.org/wiki/Symplectic_integrator".

Here we present thus two methods, which with simple changes allow us to avoid these pitfalls. The simplest possible extension is the so-called Euler-Cromer method.
The changes we need to make to our code are indeed marginal here.
We need simply to replace
!bc pycod
    r[i+1] = r[i] + DeltaT*v[i]
!ec
in the above code with the velocity at the new time $t_{i+1}$
!bc pycod
    r[i+1] = r[i] + DeltaT*v[i+1]
!ec

By this simple caveat we get stable orbits.
Below we derive the Euler-Cromer method as well as one of the most utlized algorithms for sovling the above type of problems, the so-called Velocity-Verlet method. 

!split
===== Deriving the Euler-Cromer Method =====

Let us repeat Euler's method.
We have a differential equation
!bt
\begin{equation}
y'(t_i)=f(t_i,y_i)   
\end{equation}
!et
and if we truncate at the first derivative, we have from the Taylor expansion
!bt
\begin{equation}
y_{i+1}=y(t_i) + (\Delta t) f(t_i,y_i) + O(\Delta t^2), label{eq:euler}
\end{equation}
!et
which when complemented with $t_{i+1}=t_i+\Delta t$ forms
the algorithm for the well-known Euler method. 
Note that at every step we make an approximation error
of the order of $O(\Delta t^2)$, however the total error is the sum over all
steps $N=(b-a)/(\Delta t)$ for $t\in [a,b]$, yielding thus a global error which goes like
$NO(\Delta t^2)\approx O(\Delta t)$. 

To make Euler's method more precise we can obviously
decrease $\Delta t$ (increase $N$), but this can lead to loss of numerical precision.
Euler's method is not recommended for precision calculation,
although it is handy to use in order to get a first
view on how a solution may look like.

Euler's method is asymmetric in time, since it uses information about the derivative at the beginning
of the time interval. This means that we evaluate the position at $y_1$ using the velocity
at $v_0$. A simple variation is to determine $x_{n+1}$ using the velocity at
$v_{n+1}$, that is (in a slightly more generalized form)
!bt
\begin{equation} 
y_{n+1}=y_{n}+ v_{n+1}+O(\Delta t^2)
\end{equation}
!et
and 
!bt
\begin{equation}
v_{n+1}=v_{n}+(\Delta t) a_{n}+O(\Delta t^2).
\end{equation}
!et
The acceleration $a_n$ is a function of $a_n(y_n, v_n, t_n)$ and needs to be evaluated
as well. This is the Euler-Cromer method.

_Exercise_: go back to the above code with Euler's method and add the Euler-Cromer method. 


!split
===== Deriving the Velocity-Verlet Method =====

Let us stay with $x$ (position) and $v$ (velocity) as the quantities we are interested in.

We have the Taylor expansion for the position given by
!bt
\[
x_{i+1} = x_i+(\Delta t)v_i+\frac{(\Delta t)^2}{2}a_i+O((\Delta t)^3).
\]
!et
The corresponding expansion for the velocity is 
!bt
\[
v_{i+1} = v_i+(\Delta t)a_i+\frac{(\Delta t)^2}{2}v^{(2)}_i+O((\Delta t)^3).
\]
!et
Via Newton's second law we have normally an analytical expression for the derivative of the velocity, namely
!bt
\[
a_i= \frac{d^2 x}{dt^2}\vert_{i}=\frac{d v}{dt}\vert_{i}= \frac{F(x_i,v_i,t_i)}{m}.
\]
!et


If we add to this the corresponding expansion for the derivative of the velocity 
!bt
\[
v^{(1)}_{i+1} = a_{i+1}= a_i+(\Delta t)v^{(2)}_i+O((\Delta t)^2)=a_i+(\Delta t)v^{(2)}_i+O((\Delta t)^2), 
\]
!et
and retain only terms up to the second derivative of the velocity since our error goes as $O(h^3)$, we have
!bt
\[
(\Delta t)v^{(2)}_i\approx a_{i+1}-a_i.
\]
!et
We can then rewrite the Taylor expansion for the velocity as  
!bt
\[
v_{i+1} = v_i+\frac{(\Delta t)}{2}\left( a_{i+1}+a_{i}\right)+O((\Delta t)^3).
\]
!et




!split
===== The velocity Verlet method =====

Our final equations for the position and the velocity become then 
!bt
\[
x_{i+1} = x_i+(\Delta t)v_i+\frac{(\Delta t)^2}{2}a_{i}+O((\Delta t)^3),
\]
!et
and
!bt
\[
v_{i+1} = v_i+\frac{(\Delta t)}{2}\left(a_{i+1}+a_{i}\right)+O((\Delta t)^3). 
\]
!et
Note well that the term $a_{i+1}$ depends on the position at $x_{i+1}$. This means that you need to calculate 
the position at the updated time $t_{i+1}$ before the computing the next velocity.  Note also that the derivative of the velocity at the time
$t_i$ used in the updating of the position can be reused in the calculation of the velocity update as well. 


!split
===== Adding the Velocity-Verlet Method =====

We can now easily add the Verlet method to our original code as
!bc pycod
DeltaT = 0.01
#set up arrays 
tfinal = 10 # in years
n = ceil(tfinal/DeltaT)
# set up arrays for t, a, v, and x
t = np.zeros(n)
v = np.zeros((n,2))
r = np.zeros((n,2))
# Initial conditions as compact 2-dimensional arrays
r0 = np.array([1.0,0.0])
v0 = np.array([0.0,2*pi])
r[0] = r0
v[0] = v0
Fourpi2 = 4*pi*pi
# Start integrating using the Velocity-Verlet  method
for i in range(n-1):
    # Set up forces, air resistance FD, note now that we need the norm of the vecto
    # Here you could have defined your own function for this
    rabs = sqrt(sum(r[i]*r[i]))
    a =  -Fourpi2*r[i]/(rabs**3)
    # update velocity, time and position using the Velocity-Verlet method
    r[i+1] = r[i] + DeltaT*v[i]+0.5*(DeltaT**2)*a
    rabs = sqrt(sum(r[i+1]*r[i+1]))
    anew = -4*(pi**2)*r[i+1]/(rabs**3)
    v[i+1] = v[i] + 0.5*DeltaT*(a+anew)
    t[i+1] = t[i] + DeltaT
# Plot position as function of time    
fig, ax = plt.subplots()
ax.set_ylabel('y[AU]')
ax.set_xlabel('x[AU]')
ax.plot(r[:,0], r[:,1])
fig.tight_layout()
save_fig("EarthSunVV")
plt.show()
!ec

You can easily generalize the calculation of the forces by defining a function
which takes in as input the various variables. We leave this as a challenge to you.




