TITLE: PHY321: Developing a code for the solar system
AUTHOR: Second Midterm
DATE: today



===== Building a code for the solar system, gravitational force and constants =====

We start with a simpler case first, the Earth-Sun system  in two dimensions only.  The gravitational force $F_G$ is  
!bt
  \[
      F=\frac{GM_{\odot}M_E}{r^2},
  \]
!et
where $G$ is the gravitational constant, 
!bt
\[
M_E=6\times 10^{24}\mathrm{Kg},
\]
!et 
the mass of Earth, 
!bt
\[
M_{\odot}=2\times 10^{30}\mathrm{Kg}, 
\]
!et
the mass of the Sun and 
!bt
\[
r=1.5\times 10^{11}\mathrm{m}, 
\]
!et
is the distance between Earth and the Sun. The latter defines what we call an astronomical unit _AU_.

From Newton's second law we have then for the $x$ direction

!bt
  \[
   \frac{d^2x}{dt^2}=\frac{F_{x}}{M_E},
  \]
!et

and

!bt
  \[
   \frac{d^2y}{dt^2}=\frac{F_{y}}{M_E},
  \]
!et 
for the $y$ direction.



Introducing $x=r\cos{(\theta)}$, $y=r\sin{(\theta)}$ and
!bt
\[
r = \sqrt{x^2+y^2},
\]
!et 

we can rewrite 

!bt
  \[
   F_{x}=-\frac{GM_{\odot}M_E}{r^2}\cos{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}x,
  \]
!et

and

!bt
  \[
     F_{y}=-\frac{GM_{\odot}M_E}{r^2}\sin{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}y,
  \]
!et 

for the $y$ direction.





We can rewrite these two equations
!bt
  \[
   F_{x}=-\frac{GM_{\odot}M_E}{r^2}\cos{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}x,
  \]
!et

and

!bt
  \[
     F_{y}=-\frac{GM_{\odot}M_E}{r^2}\sin{(\theta)}=-\frac{GM_{\odot}M_E}{r^3}y,
  \]
!et 

as four first-order coupled differential equations

!bt
\[
   \frac{dv_x}{dt}=-\frac{GM_{\odot}}{r^3}x,
\]
!et

!bt
\[
   \frac{dx}{dt}=v_x,
\]
!et

!bt
\[
   \frac{dv_y}{dt}=-\frac{GM_{\odot}}{r^3}y,
\]
!et

!bt
\[
   \frac{dy}{dt}=v_y.
\]
!et




The four coupled differential equations

!bt
\[
   \frac{dv_x}{dt}=-\frac{GM_{\odot}}{r^3}x,
\]
!et

!bt
\[
   \frac{dx}{dt}=v_x,
\]
!et

!bt
\[
   \frac{dv_y}{dt}=-\frac{GM_{\odot}}{r^3}y,
\]
!et

!bt
\[
   \frac{dy}{dt}=v_y,
\]
!et

can be turned into dimensionless equations (as we did in project 2) or we can introduce astronomical units with $1$ AU = $1.5\times 10^{11}$. 

Using the equations from circular motion (with $r =1\mathrm{AU}$) 

!bt
\[
\frac{M_E v^2}{r} = F = \frac{GM_{\odot}M_E}{r^2},
\]
!et 

we have

!bt
\[
GM_{\odot}=v^2r,
\]
!et  

and using that the velocity of Earth (assuming circular motion) is
$v = 2\pi r/\mathrm{yr}=2\pi\mathrm{AU}/\mathrm{yr}$, we have

!bt
\[
GM_{\odot}= v^2r = 4\pi^2 \frac{(\mathrm{AU})^3}{\mathrm{yr}^2}.
\]
!et 



The four coupled differential equations can then be discretized using the Euler-Cromer method as (with step length $h$)
!bt
\[
   v_{x,i+1}=v_{x,i}-h\frac{4\pi^2}{r_i^3}x_i,
\]
!et

!bt
\[
   x_{i+1}=x_i+hv_{x,i+1},
\]
!et

!bt
\[
   v_{y,i+1}=v_{y,i}-h\frac{4\pi^2}{r_i^3}y_i,
\]
!et

!bt
\[
   y_{i+1}=y_i+hv_{y,i+1},
\]
!et


If you wish to develop codes for a thtee-dimensional system it is rather straightforward to add the $z$-direction.
In your codes this is done by simply redefining your positions and velocities as a matrix of dimension $n\times 3$ instead of $n\times 2$ Here $n$ is the number of time steps while the number $3$ or $2$ point to the dimension of your vectors.


===== Building a code for the solar system, adding Jupiter =====

It is rather straightforward to add a new planet, say Jupiter.
Jupiter has mass
!bt
\[
M_J=1.9\times 10^{27}\mathrm{kg},
\]
!et
and distance to the Sun of $5.2$ AU. 
The additional gravitational force the Earth feels from Jupiter in the $x$-direction is
!bt
  \[
   F_{x}^{EJ}=-\frac{GM_JM_E}{r_{EJ}^3}(x_E-x_J),
  \]
!et
where $E$ stands for Earth, $J$ for Jupiter, $r_{EJ}$ is distance between Earth and Jupiter
!bt
\[
r_{EJ} = \sqrt{(x_E-x_J)^2+(y_E-y_J)^2},
\]
!et
and $x_E$ and $y_E$ are the $x$ and $y$ coordinates of Earth, respectively, and 
$x_J$ and $y_J$ are the $x$ and $y$ coordinates of Jupiter, respectively.
The $x$-component of the velocity of Earth changes thus to
!bt
\[
   \frac{dv_x^E}{dt}=-\frac{GM_{\odot}}{r^3}x_E-\frac{GM_J}{r_{EJ}^3}(x_E-x_J).
\]
!et


We can rewrite 
!bt
\[
   \frac{dv_x^E}{dt}=-\frac{GM_{\odot}}{r^3}x_E-\frac{GM_J}{r_{EJ}^3}(x_E-x_J).
\]
!et

to

!bt
\[
   \frac{dv_x^E}{dt}=-\frac{4\pi^2}{r^3}x_E-\frac{4\pi^2M_J/M_{\odot}}{r_{EJ}^3}(x_E-x_J),
\]
!et

where we used 

!bt
\[
GM_J = GM_{\odot}\left(\frac{M_J}{M_{\odot}}\right)=4\pi^2 \frac{M_J}{M_{\odot}}.
\]
!et

Similarly, for the velocity in $y$-direction we have 

!bt
\[
   \frac{dv_y^E}{dt}=-\frac{4\pi^2}{r^3}y_E-\frac{4\pi^2M_J/M_{\odot}}{r_{EJ}^3}(y_E-y_J).
\]
!et

Similar expressions apply for Jupiter. The equations for $x$ and $y$ 
derivatives are unchanged. This equations are similar for all other planets and as we will see later.


===== How can I get the initial velocities and positions of the planets =====
!bblock
"NASA":"http://www.nasa.gov/index.html" has an excellent site at URL:"http://ssd.jpl.nasa.gov/horizons.cgi#top".
From there you can extract initial conditions in order to start your differential equation solver.
At the above website you need to change from _OBSERVER_ to _VECTOR_ and then write in the planet you are interested in.
The generated data contain the $x$, $y$ and $z$ values as well as their corresponding velocities. The velocities are in units of AU per day.
Alternatively they can be obtained in terms of km and km/s. 

For the first simple system involving the Earth and the Sun, you could just initialize the position with say $x=1$ AU
and $y=0$ AU. 
!eblock


!split
===== Code Example (two-dimensional vectors) =====

Here we use the Velocity Verlet method.

!bc pycod
import matplotlib.pyplot as plt
import numpy as np
import math
%matplotlib inline

def solarsystem_j_scaled(f = 1, tf = 100, dt = .01):
    m_j = 1.9 * 10**27 * f  # Jupiter
    m_e = 6 * 10 ** 24      # Earth
    m_s = 2 * 10 ** 30      # Sun

    def get_accel(m1,m2,r1,r2):
        '''
        Given a masses and locations m1, m2, r1, r2
        Returns the force between the two masses, 
        f = [fx, fy]
        '''
        dist = r1-r2
        dist_sun = np.sqrt((r1[0])**2 + (r1[1])**2)
        distance = np.sqrt((r1[0]-r2[0])**2 + (r1[1]-r2[1])**2)
        a = -4*math.pi**2*r1/dist_sun**3-4*math.pi**2*dist*(m2/m_s)/distance**3
        return a
    
    r_s = np.array([0,0])
    n = math.ceil(tf/dt)
    print('Integration points: ', n)
    
    # set up arrays for time t, velocity v, and position r
    t = np.zeros(n)
    v_j = np.zeros((n,2))
    r_j = np.zeros((n,2))
    r_j[0] = np.array([0, 5.2])
    v_j[0] = np.array([-2.76, 0])
    
    v_e = np.zeros((n,2))
    r_e = np.zeros((n,2))
    r_e[0] = np.array([1, 0])
    v_e[0] = np.array([0, 6.28])
    
    for i in range(n-1):
        accel_earth = get_accel(m_e, m_j, r_e[i], r_j[i])
        accel_jupyter = get_accel(m_j, m_e, r_j[i], r_e[i])
        
        r_e[i+1] = r_e[i] + dt*v_e[i]+.5*dt**2*accel_earth
        r_j[i+1] = r_j[i] + dt*v_j[i]+.5*dt**2*accel_jupyter
        
        # Update forces, accel
        accel_earth_2 = get_accel(m_e, m_j, r_e[i+1], r_j[i+1])
        accel_jupyter_2 = get_accel(m_j, m_e, r_j[i+1], r_e[i+1])
        
        v_e[i+1] = v_e[i] + 1/2*dt*(accel_earth + accel_earth_2)
        v_j[i+1] = v_j[i] + 1/2*dt*(accel_jupyter + accel_jupyter_2)
        
        t[i+1] = t[i] + dt
    
    plt.plot(r_e[:, 0], r_e[:, 1], color = 'green')
    plt.plot(r_j[:, 0], r_j[:, 1], color = 'blue')
    plt.scatter(0,0,color = 'red')

!ec

===== Running the Code  =====

!bc pycod
solarsystem_j_scaled(f = 1, tf = 20, dt = 1)
!ec


!bc pycod
solarsystem_j_scaled(f = 1, tf = 300, dt = .1)
!ec

!bc pycod
solarsystem_j_scaled(f = 1, tf = 300, dt = .001)
!ec

Changing the mass factor
!bc pycod
solarsystem_j_scaled(f = 1000, tf = 3, dt = .001)
!ec


