TITLE: PHY321: Classical Mechanics 1
AUTHOR: Solution Homework 1, Spring 2021
DATE: today


There is also a set of videos with the solutions, "see Julie Butler's videos":"https://www.youtube.com/playlist?list=PLq9LZ5390Us41TX42XzOPIEPcbHaqX8Hx".

===== Exercise 1 (10 pt), math reminder, properties of exponential function  =====

The first exercise is meant to remind ourselves about properties of
the exponential function and imaginary numbers. This is highly
relevant later in this course when we start analyzing oscillatory
motion and some wave mechanics. As physicists we should thus feel comfortable with expressions that
include $\exp{(\imath\omega t)}$. Here $t$ could be interpreted as time and $\omega$ as a frequency and $\imath$ is the imaginary unit number.

=== 1a (2pt), solution: ===

Perform Taylor expansions in powers of $\omega t$ of the functions
$\cos{(\omega t)}$ and $\sin{(\omega t)}$.
We have
!bt
\[
\cos{(\omega t)} = \sum_{n=0}^{\infty}\left(-1\right)^n \frac{(\omega t)^{2n}}{(2n)!}=1-\frac{(\omega t)^{2}}{2!}+\frac{(\omega t)^{4}}{4!}-\dots,
\]
!et
and 
!bt
\[
\sin{(\omega t)} = \sum_{n=0}^{\infty}\left(-1\right)^n \frac{(\omega t)^{2n+1}}{(2n+1)!}=\omega t-\frac{(\omega t)^{3}}{3!}+\frac{(\omega t)^{5}}{5!}-\dots,
\]
!et





=== 1b (2pt), solution: ===


Perform a Taylor expansion of $\exp{(\imath\omega t)}$.
We have then
!bt
\[
\exp{(\imath\omega t)} = \sum_{n=0}^{\infty}\frac{(\imath\omega t)^{n}}{(n)!}=1+\omega t+\frac{(\imath\omega t)^{2}}{2!}+\frac{(\imath\omega t)^{3}}{3!}+\frac{(\imath\omega t)^{4}}{4!}+\frac{(\imath\omega t)^{5}}{5!}+\dots.
\]
!et


=== 1c (3pt), solution: ===

Using parts (a) and (b) here, show that $\exp{(\imath\omega t)}=\cos{(\omega t)}+\imath\sin{(\omega t)}$.

Using $\imath^2=-1$ we can rewrite the last results as
!bt
\begin{align*}
\exp{(\omega t)} = & \sum_{n=0}^{\infty}\frac{(\omega t)^{n}}{(n)!}=1+\omega t\frac{(\omega t)^{2}}{2!}+\frac{(\omega t)^{3}}{3!}+\frac{(\omega t)^{4}}{4!}+\frac{(\omega t)^{5}}{5!}+\dots\\
=& \left(1-\frac{(\omega t)^{2}}{2!}+\frac{(\omega t)^{4}}{4!}-\dots\right)+\left(\omega t-\frac{(\omega t)^{3}}{3!}+\frac{(\omega t)^{5}}{5!}-\dots\right)\\
= & \cos{(\omega t)}+\imath\sin{(\omega t)}.
\end{align*}
!et



=== 1d (3pt), solution: ===

Show that $\ln{(âˆ’1)} = \imath\pi$.

Let $\omega t = \pi$, we get
!bt
\[
\exp{(\imath\pi)}=\cos{(\pi)}+\imath\sin{(\pi)}=-1.
\]
!et


===== Exercise 2 (10 pt), Vector algebra  =====

=== 2a (4pt), solution ===

One of the many uses of the scalar product is to find the angle
between two given vectors. Find the angle between the vectors
$\bm{a}=(1,2,4)$ and $\bm{b}=(4,2,1)$ by evaluating their scalar
product.

The vector product is given by

!bt
\[
\bm{a}\bm{b} = \vert \bm{a} \vert \vert \bm{b} \vert \cos{\theta_{ab}}.
\]
!et
We have
!bt
\[
\bm{a}^T\bm{b} = 1\dot 4 \bm{e}_1\bm{e}_1+ 2\dot 2\bm{e}_2\bm{e}_2+ 4\dot 1\bm{e}_3\bm{e}_3= 4+4+4=12,
\]
!et
since $\bm{e}_i\bm{e}_i=1$ for our unit vectors, with $i=1,2,3$. Note also that the unit vectors are orthogonal, that is $\bm{e}_i\bm{e}_j=0$ if $i\ne j$.
The norm of $\vert \bm{a}\vert^2 = 1+4+ 16=21$. The norm of $\vert \bm{b}\vert^2 = 16+4+ 1=21$. This means we have 
!bt
\[
12 = 21 \cos{\theta_{ab}}, 
\]
!et
leading to $\cos{\theta_{ab}}=12/21$ and $\theta_{ab}=0.9625$ rad, with $1$ rad being equal to $180/pi$. Thus we have   $\theta_{ab}=55.15$ degrees.

A small digression on linear algebra useful for python programming of vectors.
We define the vectors as one-dimensional arrays meaning that we write
$\bm{a}^T=\begin{bmatrix} 1 & 2 & 4\end{bmatrix}$ and  $\bm{b}^T=\begin{bmatrix} 4 & 2 & 1\end{bmatrix}$, where we use $T$ to indicate the transpose of a vector.

We would then write the dot product as
!bt
\[
\bm{a}^T\bm{b}=\begin{bmatrix} 1 & 2 & 4\end{bmatrix}\begin{bmatrix} 4 \\ 2 \\ 1\end{bmatrix}=12.
\]
!et

In Python we would code this as
!bc pycod
# we import numpy and math functions
import numpy as np
from math import acos, sqrt, pi
# Define a
a =np.array([1,2,4])
# Define b 
b =np.array([4,2,1])
# to compute the dot products we use the dot function or the multiplication sign @
norm_a = sqrt(np.dot(a,a))  # we could write it as a.T @ a or just a @ a
# We will stick with the @ operator hereafter when we multiply vector or matrices
norm_b = sqrt(b.T @ b)
dot_ab = a.T @ b
theta_ab = acos(dot_ab/(norm_a*norm_b))
# convert to degrees
print(theta_ab*180/pi)
!ec



=== 2b (6pt), solution ===

For a cube with sides of length 1, one vertex at the origin, and sides
along the $x$, $y$, and $z$ axes, the vector of the body diagonal from
the origin can be written $\bm{a}=(1, 1, 1)$ and the vector of the
face diagonal in the $xy$ plane from the origin is
$\bm{b}=(1,1,0)$. Find first the lengths of the body diagonal and the
face diagonal. Use then part (2a) to find the angle between the body
diagonal and the face diagonal.

The length of the body diagonal $\vert\bm{b}\vert=\sqrt{3}$ and the length of the face diagonal is $\vert \bm{f}\vert = \sqrt{2}$. From this we find
!bt
\[
\bm{b}^T\bm{f}=2=\sqrt{2}\sqrt{3}\cos{\theta_{bf}},
\]
!et

leading to $\cos{\theta_{bf}}=\sqrt{2}/\sqrt{3}$ and $\theta_{bf}=0.615$ rad or
$\theta_{bf}=35.3$ degrees.



===== Exercise 3 (10 pt), More vector mathematics =====

=== 3a (5pt), solution ===

Show (using the fact that multiplication of reals is distributive)
that $\bm{a}(\bm{b}+\bm{c})=\bm{a}\bm{b}+\bm{a}\bm{c}$.

Writing out the equations and keeping in mind that the norm of unit vectors is one, we have

!bt
\begin{align*}
\bm{a}(\bm{b}+\bm{c})=& a_1(b_1+c_1)+a_2(b_2+c_2)+a_3(b_3+c_3)\\
=& (a_1b_1+a_1c_1)+(a_2b_2+a_2c_2)+(a_3b_3+a_3c_3)\\
= & (a_1b_1+a_2b_2+a_3b_3)+(a_1c_1+a_2c_2+a_3c_3)\\
= & \bm{a}\bm{b}+\bm{a}\bm{c}. 
\end{align*}
!et

=== 3b (5pt), solution ===

Show that (using product rule for differentiating reals)
$\frac{d}{dt}(\bm{a}\bm{b})=\bm{a}\frac{d\bm{b}}{dt}+\bm{b}\frac{d\bm{a}}{dt}$.

!bt
\begin{align*}
\frac{d}{dt}(\bm{a}\bm{b})=& \frac{d}{dt}(a_1b_1+a_2b_2+a_3b_3)\\
=& \left(a_1\frac{db_1}{dt}+\frac{da_1}{dt}b_1\right)+\left(a_2\frac{db_2}{dt}+\frac{da_2}{dt}b_2\right)+\left(a_3\frac{db_3}{dt}+\frac{da_3}{dt}b_3\right)\\
= & \left(a_1\frac{db_1}{dt}+a_2\frac{db_2}{dt}+a_3\frac{db_3}{dt}\right)+\left(\frac{da_1}{dt}b_1+\frac{da_2}{dt}b_2+\frac{da_3}{dt}b_3\right)\\
= & \bm{a}\frac{d\bm{b}}{dt}+\frac{d\bm{a}}{dt}\bm{c}. 
\end{align*}
!et


===== Exercise 4 (10 pt), Algebra of cross products  =====

"See the video made by Julie Butler":"https://www.youtube.com/playlist?list=PLq9LZ5390Us41TX42XzOPIEPcbHaqX8Hx" for the solution of these two exercises.  A typed version here will be added asap.

=== 4a (5pt), solution ===

Show that the cross products are distribuitive
$\bm{a}\times(\bm{b}+\bm{c})=\bm{a}\times\bm{b}+\bm{a}\times\bm{c}$.

=== 4b (5pt), solution ===

Show that
$\frac{d}{dt}(\bm{a}\times\bm{b})=\bm{a}\times\frac{d\bm{b}}{dt}+\bm{b}\times\frac{d\bm{a}}{dt}$. Be
careful with the order of factors


===== Exercise 5 (10 pt), Area of triangle and law of sines =====

Exercise 1.18 in the textbook of Taylor, Classical Mechanics. Part
(1.18a) gives 5pt and part (1.18b) gives also 5pt.

=== 5a (5pt), solution ===
If we place the vertex $A$ at the origin and side $b$ along the $x$-axis, then the magnitude
of the cross product $\bm{b}\times \bm{c}$ gives

!bt
\[
\vert \bm{b}\times \bm{c}\vert = \vert b_xc_y-b_yc_x\vert =\vert b_xc_y-0\dots c_x\vert =b_xc_y,
\]
!et
which is nothing but the magnitude of the base multiplied with the magnitude of the height.
We recognize that $c_y$ is the height of the vertx $B$ above the $x$-axis. From this we get that the area is
!bt
\[
\mathrm{area}=\frac{1}{2}(\mathrm{base})\dot(\mathrm{height})=\frac{1}{2}\vert \bm{b}\times \bm{c}\vert,
\]
!et
which we were supposed to show.


=== 5b (5pt), solution ===

From part 5a, using the formula for the magnitude of the cross product we have

!bt
\[
\mathrm{area}=\frac{1}{2}ab\sin{\gamma}=\frac{1}{2}bc\sin{\alpha}=\frac{1}{2}ca\sin{\beta},
\]
!et
which leads to

!bt
\[
\frac{abc}{2\mathrm{area}}=    \frac{c}{\sin{\gamma}}=\frac{a}{\sin{\alpha}}=\frac{b}{\sin{\beta}}.
\]
!et

===== Exercise 6 (10pt), Matrices and rotations in the $xy$ plane =====

The rotation of a three-dimensional vector $\bm{a}=(a_x,a_y,a_z)$ in
the $xy$ plane around an angle $\phi$ results in a new vector
$\bm{b}=(b_x,b_y,b_z)$.  This operation can be expressed in terms of
linear algebra as a matrix (the rotation matrix) multiplied with a
vector. We can write this as

!bt
\[
\begin{bmatrix} b_x \\ b_y \\ b_z \end{bmatrix} = \begin{bmatrix} \cos{\phi} & \sin{\phi} & 0 \\ -\sin{\phi} & \cos{\phi} & 0 \\ 0 & 0 & 1\end{bmatrix}\begin{bmatrix} a_x \\ a_y \\ a_z \end{bmatrix}.
\]
!et

We can write this in a more compact form as $\bm{b} = \bm{R}\bm{a}$,
where the rotation matrix is defined as

!bt
\[
\bm{R} = \begin{bmatrix} \cos{\phi} & \sin{\phi} & 0 \\ -\sin{\phi} & \cos{\phi} & 0 \\ 0 & 0 & 1\end{bmatrix}.
\]
!et

=== 6a (4pt), solution  ===

Find the transpose of the matrix $\bm{R}$. We label this as $\bm{R}^T$.

!bt
\[
\bm{R}^T=\begin{bmatrix} \cos{\phi} & -\sin{\phi} & 0 \\ \sin{\phi} & \cos{\phi} & 0 \\ 0 & 0 & 1\end{bmatrix}.
\]
!et





=== 6b (4pt), solution ===

This matrix is a so-called unitary/orthogonal matrix.  Show that $\bm{R}^T\bm{R}= \bm{I}$ where $\bm{I}$ is the so-called identity matrix with ones only along the diagonal. How would you interpret this result? For example, are scalar products changed under this transformations?

!bt
\[
\bm{R}^T\bm{R}=\begin{bmatrix} \cos^2{\phi}+\sin^2{\phi} & 0 & 0 \\ 0 & \cos^2{\phi}+\sin^2{\phi} & 0 \\ 0 & 0 & 1\end{bmatrix}=\begin{bmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 0 & 0 & 1\end{bmatrix}.
\]
!et

This means that the dot product of a vector is unchanged under such a transformation. To see this consider a rotation

!bt
\[
\bm{b}=\bm{R}\bm{a},
\]
!et
and we have the dot product for any such vector given by
!bt
\[
\bm{a}\bm{a}=\bm{a}^T\bm{a}.
\]
!et
Under such an orthorgonal transformation we have
!bt
\[
\bm{b}^T\bm{b}=(\bm{R}\bm{a})^T\bm{R}\bm{a}=\bm{a}^T\bm{R}^T\bm{R}\bm{a}=\bm{a}^T\bm{I}\bm{a}=\bm{a}^T\bm{a}.
\]
!et
The norm is conserved. Here the matrix $\bm{I}$ is the identity matrix with only ones along the diagonal and zero else. 

=== 6c (2pt), solution ===

Find the matrix for rotating a coordinate system by $90$ degrees about the $x$-axis.

The $x$-axis is now fixed, like the $z$-axis was held fixed in part
6a. We are now rotating in the $yz$-plane and the matrix becomes

!bt
\[
\bm{R} = \begin{bmatrix}1 & 0 & \\ 0&  \cos{\phi} & \sin{\phi} \\ 0& -\sin{\phi} & \cos{\phi}\end{bmatrix}.
\]
!et
Inserting the value for the angle gives us
!bt
\[
\bm{R} = \begin{bmatrix}1 & 0 & \\ 0&  0 & 1 \\ 0& -1 & 0\end{bmatrix}.
\]
!et




=====  Exercise 7 (40pt), Numerical elements, getting started with some simple data =====


Our first numerical attempt will involve reading data from file or
just setting up two vectors, one for position and one for time. Our data are from 
"Usain Bolt's world record 100m during the olympic games in Beijing in
2008":"https://www.youtube.com/watch?v=93dC0o2aHto". The data show the time used in units of 10m (see below). Before we however
venture into this, we need to repeat some basic Python syntax with an
emphasis on

* basic Python syntax for arrays
* define and operate on vectors and matrices in Python
* create plots for motion in 1D space
For more information, see the "introductory slides":"https://mhjensen.github.io/Physics321/doc/pub/week3/html/week3.html".
Here are some of the basic packages we will be using this week
!bc pycod 
import numpy as np 
import matplotlib.pyplot as plt
%matplotlib inline
!ec


The first exercise here deals with simply getting familiar with vectors and matrices.

We will be working with vectors and matrices to get you familiar with them

o Initalize two three-dimensional $xyz$ vectors in the below cell using np.array([x,y,z]). Vectors are represented through arrays in python
o V1 should have x1=1, y1 =2, and z1=3. 
o Vector 2 should have x2=4, y2=5,  and z2=6. 
o Print both vectors to make sure your code is working properly.

!bc pycod
V1 = np.array([1,2,3])
V2 = np.array([4,5,6])
print("V1: ", V1)
print("V2: ", V2)
!ec

If this is not too familiar, here's a useful link for creating vectors in python URL:"https://docs.scipy.org/doc/numpy-1.13.0/user/basics.creation.html". Alternatively, look up the "introductory slides":"https://mhjensen.github.io/Physics321/doc/pub/Introduction/html/Introduction.html".

Now lets do some basic mathematics with vectors.


Compute and print the following, and double check with hand calculations:

* 7a (2pt)  Calculate $\bm{V}_1-\bm{V}_2$.
* 7b (2pt)  Calculate $\bm{V}_2-\bm{V}_1$.
* 7c (2pt) Calculate the dot product $\bm{V}_1\bm{V}_2$.
* 7d (2pt) Calculate the cross product $\bm{V}_1\times\bm{V}_2$.

Here is some useful explanation on numpy array operations if you feel a bit confused by what is happening, see URL:"https://www.pluralsight.com/guides/overview-basic-numpy-operations"

=== 7a-7d, solutions ===

The following code prints the first two exercises
!bc pycod
print(V1-V2)
print(V2-V1)
!ec

For the dot product of V1 and V2 below we can use the _dot_ function of _numpy_ as follows
!bc pycod
print(V1.dot(V2))
!ec
Alternatively, and this is the way it is normally written in Python now, we have
!bc pycod
print(V1 @ V2)
!ec

A personal remark: I am not too fond of this notation!


As a small challenge try to write your own function for the _dot_ product of two vectors.

Matrices can be created in a similar fashion in python.  In this
language we can work with them through the package numpy (which we
have already imported)


!bc pycod
M1 = np.matrix([[1,2,3],
             [4,5,6],
             [7,8,9]])
M2 = np.matrix([[1,2],
             [3,4],
             [5,6]])
M3 = np.matrix([[9,8,7],
             [4,5,6],
             [7,6,9]])
!ec

Matrices can be added in the same way vectors are added in python as shown here
!bc pycod
print("M1+M3: ", M1+M3)
!ec
What happens if we try to do $M1+M2$?

=== 7e (4pt), solution ===

Let us go back to exercise 6. Define a vector $\bm{a}=(1,0,0)$ and set
the angle $\phi$ in the rotation matrix (rotation in the $xy$ plane)
to $45$ degrees. Set up the matrix $\bm{R}$ and find the vector
$\bm{b}=\bm{R}\bm{a}$.



To perform a matrix-vector multiplication of the above type, the following python code may be of use. Here we just define a random vector and a random $3\times 3$ matrix
!bc pycod
import numpy as np
#We define a  3 dimensional vector with random numbers
n = 3
a = np.random.rand(n)
# define a matrix of dimension 3 x 3 and set all elements to random numbers with x \in [0, 1]
R = np.random.rand(n, n)
#print the vector and the matrix
print(a)
print(R)
# perform a matrix-vector multiplication. Note that we need to transpose the vector and the odd way to indicate a multiplication with @
b = R @ a.T
print(b)
!ec




The code which solves the problem of 7e can be written as

!bc pycod
import numpy as np
from math import sin, cos, pi
#We define a  the vector a (3-dim)
a = np.array([1,0,0])
# define the angle in Radians
phi = 45*pi/180.
#define cos and sin
c = cos(phi)
s = sin(phi)
# define a matrix of dimension 3 x 3 and set the elements
R = np.array([[c, s, 0], [-s,c,0],[0,0,1]])
#print the vector and the matrix
print(a)
print(R)
# perform a matrix-vector multiplication. Note that we need to transpose the vector and the odd way to indicate a multiplication with @
b = R @ a.T
print(b)
!ec




That's enough vectors and matrices for now. Let's move on to some physics problems! Yes, the actual subject we are studying for. 

We can opt for two different ways of handling the data. The data is listed in the table here and represents the total time Usain Bolt used in steps of  10 meters of distance. The label $i$ is just a counter and we start from zero since Python arrays are by default set from zero. The variable $t$ is time in seconds and $x$ is the position in meters.

|-------------------------------------------|
| i | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|-------------------------------------------|
| x[m] | 10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90 | 100 |
|-------------------------------------------|
| t[s] | 1.85 | 2.87 | 3.78 |  4.65 | 5.50 | 6.32 | 7.14 | 7.96 | 8.79 | 9.69 |
|-------------------------------------------|

=== 7f-7g (4pt)+(4pt), solution  ===

You can here make a file with the above data and read them in and set
up two vectors, one for time and one for position. Alternatively, you
can just set up these two vectors directly and define two vectors in
your Python code.
_Note_ we add by hand the initial conditions with position and time set to zero!

The following example code may help here. It plots the solution as well.
!bc pycod
# we just initialize time and position
x = np.array([0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0])
t = np.array([0.0,1.85, 2.87, 3.78, 4.65, 5.50, 6.32, 7.14, 7.96, 8.79, 9.69])
plt.plot(t,x, color='black')
plt.xlabel("Time t[s]")
plt.ylabel("Position x[m]")
plt.title("Usain Bolt's world record run")
plt.show()
!ec


=== 7h (10pt), solution ===

Compute thereafter the mean velocity for every interval $i$ and the total velocity (from $i=0$ to the given interval $i$) for each interval and plot these two quantities as function of time. Comment your results.

!bc pycod
# Now we can compute the mean velocity using our data
# We define first an array Vaverage
n = np.size(t)
Vaverage = np.zeros(n)
TotalVaverage = np.zeros(n)
for i in range(1,n):
    Vaverage[i] = (x[i]-x[i-1])/(t[i]-t[i-1])
    TotalVaverage[i] = (x[i]-x[0])/(t[i]-t[0])
!ec

=== 7i (10pt), solution ===

Finally, compute and print and plot the mean velocities, total average velocity, acceleration for each interval and the total acceleration. 


!bc pycod
# Now we can compute the mean acceleration using our data
# We define first an array Aaverage
n = np.size(t)
Aaverage = np.zeros(n)
Aaverage[0] = 0
TotalAaverage = np.zeros(n)
for i in range(1,n):
    Aaverage[i] = (Vaverage[i]-Vaverage[i-1])/(t[i]-t[i-1])
    TotalAaverage[i] = (Vaverage[i]-Vaverage[0])/(t[i]-t[0])
data = {'t[s]': t,
        'x[m]': x,
        'v[m/s]': Vaverage,
	'Totvaver[m/s]': TotalVaverage,
        'a[m/s^2]': Aaverage,
	'TotAaver[m/s]': TotalAaverage
        }
NewData = pd.DataFrame(data)
display(NewData[0:n])
!ec

We see clearly from this table that the average velocity increases
till approximately 60m. Then it is constant for another 20 meters
before it starts to decrease. The average accelaration increases till
he has reached the first 20 meters, then it starts decreasing. After 80
meters we see clearly that he starts to slow down since the acceleration
becomes negative.

After $100$m we note also that the total average velocity is
approximately 10.32 m/s and the total average acceleration is
decreasing from its peak around 20m.

The interesting question is how quickly Usain Bolt
could have run if he had not slowed down during the last 20 meters. Can you find this
based on the present analysis, that is the above table? Assume he kept
a constant velocity like the one he had from 60m to 80m. How fast
could he have run if he had kept the same velocity till he reached
100m?
